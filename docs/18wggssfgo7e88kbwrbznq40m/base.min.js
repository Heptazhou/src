/* https://github.com/Heptazhou/base.js v4.0.0 */
require=function(){function a(b,c,d){function e(f,k){var i,j,h;if(!c[f]){if(!b[f]){if(i="function"==typeof require&&require,!k&&i)return i(f,!0);if(g)return g(f,!0);throw j=new Error("Cannot find module '"+f+"'"),j.code="MODULE_NOT_FOUND",j}h=c[f]={exports:{}},b[f][0].call(h.exports,function(a){var c=b[f][1][a];return e(c||a)},h,h.exports,a,b,c,d)}return c[f].exports}for(var g="function"==typeof require&&require,f=0;f<d.length;f++)e(d[f]);return e}return a}()({base:[function(c,a,d){"use strict";function b(c){var b,e,d,f,g,a,h,i,j;if(c.length>=255)throw new TypeError("Alphabet too long");b=new Uint8Array(256);for(e=0;e<b.length;e++)b[e]=255;for(d=0;d<c.length;d++){if(f=c.charAt(d),g=f.charCodeAt(0),b[g]!==255)throw new TypeError(f+" is ambiguous");b[g]=d}a=c.length,h=c.charAt(0),i=Math.log(a)/Math.log(256),j=Math.log(256)/Math.log(a);function l(b){var o,l,d,n,g,i,e,m,k,f,p;if(b instanceof Uint8Array||(ArrayBuffer.isView(b)?b=new Uint8Array(b.buffer,b.byteOffset,b.byteLength):Array.isArray(b)&&(b=Uint8Array.from(b))),!(b instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(b.length===0)return"";for(o=0,l=0,d=0,n=b.length;d!==n&&b[d]===0;)d++,o++;for(g=(n-d)*j+1>>>0,i=new Uint8Array(g);d!==n;){e=b[d],m=0;for(k=g-1;(e!==0||m<l)&&k!==-1;k--,m++)e+=256*i[k]>>>0,i[k]=e%a>>>0,e=e/a>>>0;if(e!==0)throw new Error("Non-zero carry");l=m,d++}for(f=g-l;f!==g&&i[f]===0;)f++;for(p=h.repeat(o);f<g;++f)p+=c.charAt(i[f]);return p}function k(g){var d,m,n,f,k,c,l,j,e,o,p;if(typeof g!="string")throw new TypeError("Expected String");if(g.length===0)return new Uint8Array;for(d=0,m=0,n=0;g[d]===h;)m++,d++;for(f=(g.length-d)*i+1>>>0,k=new Uint8Array(f);g[d];){if(c=b[g.charCodeAt(d)],c===255)return;l=0;for(j=f-1;(c!==0||l<n)&&j!==-1;j--,l++)c+=a*k[j]>>>0,k[j]=c%256>>>0,c=c/256>>>0;if(c!==0)throw new Error("Non-zero carry");n=l,d++}for(e=f-n;e!==f&&k[e]===0;)e++;for(o=new Uint8Array(m+(f-e)),p=m;e!==f;)o[p++]=k[e++];return o}function m(c){var b=k(c);if(b)return b;throw new Error("Non-base"+a+" character")}return{encode:l,decodeUnsafe:k,decode:m}}a.exports=b},{}]},{},[])
